# -*- coding: utf-8 -*-
"""Projeto Final - Parte I (Lógica Fuzzy).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1slsBzP3ByEgODRYaOQ82HCpK9-YiH0Hv

# Projeto final - Parte I para a detectar o risco de falhas em motores elétricos
## **Membros** = Caio Ribeiro de Oliveira, Leonardo Henrique dos Santos, Gabriel Wan Dall Parra, Matheus Felipe Antunes Carvalho, Vinicius Denker da Costa
"""

# Instalar bibliotecas - para executar as funções fuzzy
!pip install scikit-fuzzy

''' Variaveis Trabalhadas
 Desequilíbrio entre fases -> desequilibrio_fases -> (0, 13.5, 14)
 Temperatura ambiente -> temperatura_amb -> (0, 49)
 Torque entregue -> torque_entregue -> (-1500, 0, 100)
 Resistência do Isolamento Elétrico -> resistencia_iso_eletric -> (0, 10, 50)
 Presença de folgas mecânicas -> folga_mecanica -> (0, 0.02, 0.05)'''

# Importação de bibliotecas
import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl

# Definição das variáveis de entrada
desequilibrio_fases = ctrl.Antecedent(np.arange(0, 15.5, 0.5), 'desequilibrio_fases')
temperatura_amb = ctrl.Antecedent(np.arange(0, 51, 1), 'temperatura_amb')
torque_entregue = ctrl.Antecedent(np.arange(-1500, 101, 50), 'torque_entregue')
resistencia_iso_eletric = ctrl.Antecedent(np.arange(0, 51, 1), 'resistencia_iso_eletric')
folga_mecanica = ctrl.Antecedent(np.arange(0, 0.051, 0.001), 'folga_mecanica')

# Saída: risco de falha
risco_falha = ctrl.Consequent(np.arange(0, 101, 1), 'risco_falha')

# Funções de pertinência
desequilibrio_fases['baixo'] = fuzz.trapmf(desequilibrio_fases.universe, [0, 0, 3, 6])
desequilibrio_fases['medio'] = fuzz.trimf(desequilibrio_fases.universe, [5, 8, 11])
desequilibrio_fases['alto'] = fuzz.trapmf(desequilibrio_fases.universe, [10, 12, 14, 14])

temperatura_amb['baixa'] = fuzz.trapmf(temperatura_amb.universe, [0, 0, 10, 20])
temperatura_amb['normal'] = fuzz.trimf(temperatura_amb.universe, [15, 25, 35])
temperatura_amb['alta'] = fuzz.trapmf(temperatura_amb.universe, [30, 40, 49, 49])

torque_entregue['baixo'] = fuzz.trapmf(torque_entregue.universe, [-1500, -1500, -1000, -500])
torque_entregue['medio'] = fuzz.trimf(torque_entregue.universe, [-600, -300, 0])
torque_entregue['alto'] = fuzz.trapmf(torque_entregue.universe, [-100, 0, 100, 100])

resistencia_iso_eletric['baixa'] = fuzz.trapmf(resistencia_iso_eletric.universe, [0, 0, 5, 15])
resistencia_iso_eletric['media'] = fuzz.trimf(resistencia_iso_eletric.universe, [10, 20, 30])
resistencia_iso_eletric['alta'] = fuzz.trapmf(resistencia_iso_eletric.universe, [25, 35, 50, 50])

folga_mecanica['pequena'] = fuzz.trapmf(folga_mecanica.universe, [0, 0, 0.005, 0.015])
folga_mecanica['moderada'] = fuzz.trimf(folga_mecanica.universe, [0.01, 0.025, 0.035])
folga_mecanica['grande'] = fuzz.trapmf(folga_mecanica.universe, [0.03, 0.04, 0.05, 0.05])

risco_falha['baixo'] = fuzz.trapmf(risco_falha.universe, [0, 0, 25, 40])
risco_falha['medio'] = fuzz.trimf(risco_falha.universe, [35, 55, 70])
risco_falha['alto'] = fuzz.trapmf(risco_falha.universe, [65, 80, 100, 100])

# Regras fuzzy
rules = [
    ctrl.Rule(desequilibrio_fases['alto'] | temperatura_amb['alta'], risco_falha['alto']),
    ctrl.Rule(folga_mecanica['grande'] | resistencia_iso_eletric['baixa'], risco_falha['alto']),
    ctrl.Rule(torque_entregue['baixo'] & folga_mecanica['moderada'], risco_falha['medio']),
    ctrl.Rule(torque_entregue['medio'] & temperatura_amb['normal'], risco_falha['medio']),
    ctrl.Rule(resistencia_iso_eletric['alta'] & folga_mecanica['pequena'], risco_falha['baixo']),
    ctrl.Rule(desequilibrio_fases['baixo'] & torque_entregue['alto'], risco_falha['baixo']),
    ctrl.Rule(temperatura_amb['baixa'] & resistencia_iso_eletric['alta'], risco_falha['baixo']),
    ctrl.Rule(desequilibrio_fases['medio'] & folga_mecanica['moderada'], risco_falha['medio']),
    ctrl.Rule(temperatura_amb['alta'] & resistencia_iso_eletric['baixa'], risco_falha['alto']),
    ctrl.Rule(desequilibrio_fases['alto'] & folga_mecanica['grande'], risco_falha['alto'])
]

# Sistema de controle
risco_ctrl = ctrl.ControlSystem(rules)
simulador = ctrl.ControlSystemSimulation(risco_ctrl)

# Função de interação com o usuário
def regras_ativas_motor():
    try:
        # Entradas manuais
        print("\nInforme os valores de entrada para o sistema fuzzy:")
        desequil = float(input("Desequilíbrio entre fases (0 a 14 kV): "))
        temp = float(input("Temperatura ambiente (0 a 49 ºC): "))
        torque = float(input("Torque entregue (-1500 a 100 Nm): "))
        resistencia = float(input("Resistência do isolamento (0 a 50 ºC): "))
        folga = float(input("Folga mecânica (0 a 0.05 m): "))

        # Validação (básica, pode ser expandida)
        if not (0 <= desequil <= 14 and 0 <= temp <= 49 and -1500 <= torque <= 100 and 0 <= resistencia <= 50 and 0 <= folga <= 0.05):
            print("Um ou mais valores estão fora dos limites permitidos.")
            return

        # Mostrar valores informados
        print("\nEntradas informadas:")
        print(f"- Desequilíbrio entre fases: {desequil} kV")
        print(f"- Temperatura ambiente: {temp} ºC")
        print(f"- Torque entregue: {torque} Nm")
        print(f"- Resistência do isolamento elétrico: {resistencia} ºC")
        print(f"- Folga mecânica: {folga*1000:.2f} mm")

        # Graus de pertinência
        print("\nGraus de pertinência (ativação dos conjuntos fuzzy):")

        print("→ Desequilíbrio entre fases:")
        for termo in desequilibrio_fases.terms:
            grau = fuzz.interp_membership(desequilibrio_fases.universe, desequilibrio_fases[termo].mf, desequil)
            if grau > 0:
                print(f"   - {termo}: {grau:.2%}")

        print("→ Temperatura ambiente:")
        for termo in temperatura_amb.terms:
            grau = fuzz.interp_membership(temperatura_amb.universe, temperatura_amb[termo].mf, temp)
            if grau > 0:
                print(f"   - {termo}: {grau:.2%}")

        print("→ Torque entregue:")
        for termo in torque_entregue.terms:
            grau = fuzz.interp_membership(torque_entregue.universe, torque_entregue[termo].mf, torque)
            if grau > 0:
                print(f"   - {termo}: {grau:.2%}")

        print("→ Resistência do isolamento elétrico:")
        for termo in resistencia_iso_eletric.terms:
            grau = fuzz.interp_membership(resistencia_iso_eletric.universe, resistencia_iso_eletric[termo].mf, resistencia)
            if grau > 0:
                print(f"   - {termo}: {grau:.2%}")

        print("→ Folga mecânica:")
        for termo in folga_mecanica.terms:
            grau = fuzz.interp_membership(folga_mecanica.universe, folga_mecanica[termo].mf, folga)
            if grau > 0:
                print(f"   - {termo}: {grau:.2%}")

        # Inserir valores no sistema fuzzy
        simulador.input['desequilibrio_fases'] = desequil
        simulador.input['temperatura_amb'] = temp
        simulador.input['torque_entregue'] = torque
        simulador.input['resistencia_iso_eletric'] = resistencia
        simulador.input['folga_mecanica'] = folga

        # Computar o resultado
        simulador.compute()

        # Saída
        print(f"\nResultado fuzzy: Risco de Falha = {simulador.output['risco_falha']:.2f}%")

        # Exibição do gráfico dos conjutnos fuzzy
        print("\nGráficos do resultado: ")
        risco_falha.view(sim=simulador)

    except Exception as e:
        print(f"Erro: {e}")

# Chamando a função
regras_ativas_motor()